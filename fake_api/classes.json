[
    {"quotation": "Classes are a design pattern. Many languages provide syntax that enables natural class-oriented software design. JS also has a similar syntax, but it behaves very differently from what you’re used to with classes in those other languages."},
    {"quotation": "The mixin pattern (both explicit and implicit) is often used to sort of emulate class copy behavior, but this usually leads to ugly and brittle syntax like explicit pseudopolymorphism (OtherObj.method Name.call(this, ...)), which often results in code that is harder to understand and maintain."},
    {"quotation": "In general, faking classes in JS often sets more landmines for future coding than solving present real problems."},
    {"quotation": "JS has had some class-like syntactic elements (like new and instanceof) for quite a while, and more recently in ES6, some additions, like the class keyword.<br/><br/>But does that mean JavaScript actually has classes? Plain and simple: <strong>NO</strong>."},
    {"quotation": "In traditional class-oriented languages, you never adjust the definition of a class later, so the class design pattern doesn’t suggest such capabilities. But one of the most powerful parts of JS is that it is dynamic, and the definition of any object is (unless you make it immutable) a fluid and mutable thing."},
    {"quotation": "One of the most heralded benefits to the new class and extend design is the ability to (finally!) subclass the built-in natives, like Array."},
    {"quotation": "new.target is a new “magical” value available in all functions, though in normal functions it will always be undefined. In any constructor, new.target always points at the constructor that new actually directly invoked, even if the constructor is in a parent class and was delegated to by a super(..) call from a child constructor."},
    {"quotation": "The static keyword defines a static method or property for a class, or a class static initialization block. Neither static methods nor static properties can be called on instances of the class. Instead, they're called on the class itself."}
]
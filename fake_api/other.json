[
    {"quotation": "The window.requestAnimationFrame() method tells the browser that you wish to perform an animation and requests that the browser calls a specified function to update an animation before the next repaint. The method takes a callback as an argument to be invoked before the repaint.</br></br>The window.cancelAnimationFrame() method cancels an animation frame request previously scheduled through a call to window.requestAnimationFrame(requestID)."},
    {"quotation": "String.prototype.padStart() method pads the current string with another string (multiple times, if needed) until the resulting string reaches the given length. The padding is applied from the start of the current string."},
    {"quotation": "Promise Methods â€” All, AllSettled, Any, and Race"},
    {"quotation": "Nullish Coalescing: `const defName = name ?? 'Default Name'`"},
    {"quotation": "The querySelectorAll() method returns a static NodeList. The childNodes property returns a live NodeList.A NodeList is a collection of document nodes (element nodes, attribute nodes, and text nodes). NodeList items can only be accessed by their index number. A NodeList is most often a static collection. Example: If you add a <li> element to a list in the DOM, the list in NodeList will not change."},
    {"quotation": "An HTMLCollection is a collection of document elements. The getElementsByClassName() and getElementsByTagName() methods return a live HTMLCollection. HTMLCollection items can be accessed by their name, id, or index number. An HTMLCollection is always a live collection. Example: If you add a <li> element to a list in the DOM, the list in the HTMLCollection will also change."},
    {"quotation": "Array.from(arrayLike[, mapFn[, thisArg]]) vs Array.of(element0[, element1[, ...[, elementN]]])"},
    {"quotation": ".clientHeight - inner, .offsetHeight - +padding and border+XScroll, .scrollHeight - full inner?"},
    {"quotation": "The Element interface's scrollIntoView() method scrolls the element's ancestor containers such that the element on which scrollIntoView() is called is visible to the user. vs window.scrollTo({ top: 100, left: 100, behavior: 'smooth'});"},
    {"quotation": "Event Delegation - event listener on parent to manually delegate events on children. event.target used to determine the child"},
    {"quotation": "The AbortController interface represents a controller object that allows you to abort one or more Web requests as and when desired."},
    {"quotation": "Currying - transforming func to treat it's parameters as sequence of individual function calls that each take one"},
    {"quotation": "type='module' - strict and defered by default. + await import is valid for conditional calls "},
    {"quotation": "The SharedWorker interface represents a specific kind of worker that can be accessed from several browsing contexts, such as several windows, iframes or even workers. They implement an interface different than dedicated workers and have a different global scope"},
    {"quotation": "TS Generics: <br/>interface Setter&lt;Key, Value&gt; {<br/>&emsp;set: (key: Key, value: Value) => void;<br/>}"}   
]